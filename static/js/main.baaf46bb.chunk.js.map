{"version":3,"sources":["components/TodoAppTitle.js","components/TodoAppAdd.js","redux/actions.js","redux/actionTypes.js","components/TodoAppHeader.js","components/TodoAppListItem.js","components/TodoAppList.js","components/TodoApp.js","App.js","serviceWorker.js","redux/store.js","redux/reducers.js","index.js"],"names":["TodoAppTitle","Typography","style","padding","variant","TodoAppAdd","props","state","value","className","onSubmit","e","preventDefault","newContent","addTodo","setState","TextField","type","placeholder","label","this","onChange","target","Button","disabled","Component","mapDispatchToProps","content","payload","connect","TodoAppHeader","toggleTodo","id","deleteTodo","completed","ListItem","display","Checkbox","onClick","textDecoration","IconButton","todos","todoReducer","List","map","todo","TodoApp","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","Math","random","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAaeA,EAVM,WACjB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAYC,MAAO,CAAEC,QAAS,IAAMC,QAAQ,MAA5C,sB,0BCFNC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,IAJI,E,qDAQT,IAAD,OACL,OACI,6BACI,0BAAMC,UAAU,YAAYC,SAAU,SAACC,GACnCA,EAAEC,iBACF,IAAMC,EAAa,EAAKN,MAAMC,MAC9B,EAAKF,MAAMQ,QAAQD,GACnB,EAAKE,SAAS,CACVP,MAAO,OAGX,kBAACQ,EAAA,EAAD,CAAWC,KAAK,OACZC,YAAY,WACZC,MAAM,OACNX,MAAOY,KAAKb,MAAMC,MAClBa,SAAU,SAACV,GACP,EAAKI,SAAS,CACVP,MAAOG,EAAEW,OAAOd,WAI5B,kBAACe,EAAA,EAAD,CAAQC,UAAWJ,KAAKb,MAAMC,MAAOS,KAAK,UAA1C,gB,GA9BKQ,aAoCnBC,EAAqB,CACvBZ,QCvCmB,SAACa,GACpB,MAAO,CACHV,KCJgB,WDKhBW,QAASD,KDuCFE,cAAQ,KAAMH,EAAdG,CAAkCxB,GG/BlCyB,EATO,SAAC,GAAc,EAAbhB,QACpB,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,4CCeNY,EAAqB,CACvBK,WHTsB,SAACC,GACvB,MAAO,CACHf,KChBmB,cDiBnBW,QAASI,IGObC,WHjBsB,SAACD,GACvB,MAAO,CACHf,KCRmB,cDSnBW,QAAQI,KGiBDH,cAAQ,KAAMH,EAAdG,EAtBS,SAAC,GAAwD,IAAtDF,EAAqD,EAArDA,QAASK,EAA4C,EAA5CA,GAAIE,EAAwC,EAAxCA,UAAWH,EAA6B,EAA7BA,WAAYE,EAAiB,EAAjBA,WAC3D,OACI,kBAACE,EAAA,EAAD,CAAUjC,MAAO,CAAEkC,QAAS,SACxB,kBAACC,EAAA,EAAD,CACIC,QAAS,kBAAMP,EAAWC,MAE9B,kBAAC/B,EAAA,EAAD,CAAYC,MAAO,CACfqC,eAAgBL,EAAY,eAAiB,YAE5CP,GAEL,kBAACa,EAAA,EAAD,CAAYF,QAAS,kBAAML,EAAWD,KAClC,kBAAC,IAAD,W,SCGDH,eANS,SAACtB,GACrB,MAAO,CACHkC,MAAOlC,EAAMmC,eAINb,EAjBK,SAACvB,GACjB,OACI,kBAACqC,EAAA,EAAD,KAEQrC,EAAMmC,MAAMG,KAAI,SAACC,GACb,OAAO,kBAAC,EAAoBA,UCcjCC,E,kDAhBP,WAAYxC,GAAQ,uCACVA,G,qDAIN,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVEmB,aCQPsB,MARf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,QCIcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCfAC,EAAWC,YAAgB,CAC7BZ,YCJuB,WAAyB,IAAxBnC,EAAuB,uDAAf,GAAIgD,EAAW,uCAC/C,OAAQA,EAAOtC,MACX,IAAK,WACD,MAAM,GAAN,mBAAWV,GAAX,CAAkB,CACdyB,GAAIwB,KAAKC,SACTvB,WAAW,EACXP,QAAS4B,EAAO3B,WAExB,IAAK,cACD,OAAOrB,EAAMmD,QAAO,SAACb,GAAD,OAAQA,EAAKb,KAAOuB,EAAO3B,WAEnD,IAAK,cACD,OAAOrB,EAAMqC,KAAI,SAACC,GACd,OAAIA,EAAKb,KAAOuB,EAAO3B,QACZ,eAAKiB,EAAZ,CAAkBX,WAAYW,EAAKX,YAEhCW,KAEf,QACI,OAAOtC,MDXNoD,EAAQC,YAAYP,GEDjCQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.baaf46bb.chunk.js","sourcesContent":["import React from 'react'\nimport Typography from \"@material-ui/core/Typography\";\n\nconst TodoAppTitle = () => {\n    return (\n        <div>\n            <Typography style={{ padding: 16 }} variant=\"h1\">\n            React-Redux ToDo \n            </Typography>\n        </div>\n    )\n}\n\nexport default TodoAppTitle\n","import React, { Component } from 'react';\nimport { Button, TextField } from \"@material-ui/core\";\nimport { connect } from \"react-redux\"\nimport { addTodo } from \"../redux/actions\"\nclass TodoAppAdd extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: \"\"\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form className=\"todo-form\" onSubmit={(e) => {\n                    e.preventDefault();\n                    const newContent = this.state.value;\n                    this.props.addTodo(newContent)\n                    this.setState({\n                        value: \"\"\n                    })\n                }}>\n                    <TextField type=\"text\"\n                        placeholder=\"Add Todo\"\n                        label=\"Task\"\n                        value={this.state.value}\n                        onChange={(e) => {\n                            this.setState({\n                                value: e.target.value,\n                            })\n                        }}\n                    />\n                    <Button disabled={!this.state.value} type=\"submit\">Submit</Button>\n                </form>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = {\n    addTodo: addTodo\n}\n\nexport default connect(null, mapDispatchToProps)(TodoAppAdd);\n\n","import {ADD_TODO,TOGGLE_TODO, DELETE_TODO} from \"./actionTypes\"\n\nexport const addTodo = (content) => {\n    return {\n        type: ADD_TODO,\n        payload: content\n    }\n}\nexport const deleteTodo = (id)=>{\n    return {\n        type: DELETE_TODO,\n        payload:id\n    }\n}\n\nexport const toggleTodo = (id) =>{\n    return {\n        type: TOGGLE_TODO,\n        payload: id\n    }\n}\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";","import React from 'react'\nimport TodoAppTitle from './TodoAppTitle'\nimport TodoAppAdd from './TodoAppAdd'\n\nconst TodoAppHeader = ({addTodo}) => {\n    return (\n        <div>\n            <TodoAppTitle />\n            <TodoAppAdd />\n        </div>\n    )\n}\n\nexport default TodoAppHeader\n","import React from 'react'\nimport { connect } from \"react-redux\"\nimport { toggleTodo, deleteTodo } from \"../redux/actions\"\nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst TodoAppListItem = ({ content, id, completed, toggleTodo, deleteTodo }) => {\n    return (\n        <ListItem style={{ display: \"flex\" }}>\n            <Checkbox\n                onClick={() => toggleTodo(id)} />\n\n            <Typography style={{\n                textDecoration: completed ? \"line-through\" : \"initial\"\n            }}>\n                {content}\n            </Typography>\n            <IconButton onClick={() => deleteTodo(id)}>\n                <CloseIcon />\n            </IconButton>\n        </ListItem>\n    )\n}\nconst mapDispatchToProps = {\n    toggleTodo: toggleTodo,\n    deleteTodo: deleteTodo\n}\n\nexport default connect(null, mapDispatchToProps)(TodoAppListItem)\n","import React from 'react'\nimport TodoAppListItem from \"./TodoAppListItem\"\nimport {connect} from \"react-redux\"\nimport { List } from \"@material-ui/core\";\nconst TodoAppList = (props) => {\n    return (\n        <List>\n            {\n                props.todos.map((todo)=>{\n                    return <TodoAppListItem {...todo}/>\n                })\n            }\n        </List> \n    )\n}\nconst mapStateToProps = (state) =>{\n    return {\n        todos: state.todoReducer\n    }\n}\n\nexport default connect(mapStateToProps)(TodoAppList)\n","import React, { Component } from 'react';\nimport TodoAppHeader from './TodoAppHeader'\nimport TodoAppList from './TodoAppList'\n\n\nclass TodoApp extends Component {\n        // eslint-disable-next-line no-useless-constructor\n        constructor(props) {\n            super(props)\n        }\n\n        render() {\n            return (\n                <div>\n                    <TodoAppHeader />\n                    <TodoAppList />\n                </div>\n            );\n        }\n    }\n\n\n\nexport default TodoApp\n","import React from 'react';\nimport './App.css';\nimport TodoApp from './components/TodoApp'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { todoReducer } from \"./reducers\"\nimport { combineReducers, createStore } from \"redux\"\n\nconst reducers = combineReducers({\n    todoReducer: todoReducer\n\n})\n\nexport const store = createStore(reducers)","export const todoReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [...state, {\n                id: Math.random(),\n                completed: false,\n                content: action.payload\n            }]\n        case 'DELETE_TODO':\n            return state.filter((todo)=>todo.id !== action.payload)\n\n        case 'TOGGLE_TODO':\n            return state.map((todo) => {\n                if (todo.id === action.payload) {\n                    return { ...todo, completed: !todo.completed }\n                }\n                return todo\n            })\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}