{"version":3,"sources":["components/TodoAppTitle.js","redux/actions.js","redux/actionTypes.js","components/TodoAppAdd.js","components/TodoAppHeader.js","components/TodoAppListItem.js","components/TodoAppList.js","components/TodoApp.js","App.js","serviceWorker.js","redux/store.js","redux/reducers.js","index.js"],"names":["TodoAppTitle","title","Typography","style","padding","variant","prototype","propTypes","string","isRequired","showNotification","content","dispatch","type","payload","setTimeout","hideNotification","todoAddValidation","Yup","shape","required","max","description","min","TodoAppAdd","props","initialValues","completed","priority","validationSchema","onSubmit","values","resetForm","addTodo","errors","handleChange","handleSubmit","setFieldValue","isSubmitting","TextField","name","placeholder","label","value","onChange","color","Checkbox","id","checked","FormLabel","htmlFor","FormControl","Select","MenuItem","Button","opacity","Object","keys","length","Component","mapDispatchToProps","newTodoObject","connect","TodoAppHeader","toggleTodo","deleteTodo","ListItem","display","flexDirection","alignItems","justifyContent","onClick","textDecoration","IconButton","state","todos","todoReducer","List","map","todo","TodoApp","this","notificationText","notificationsReducer","App","className","Boolean","window","location","hostname","match","reducers","combineReducers","action","Math","random","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e6090b3.chunk.js","sourcesContent":["import React from 'react'\nimport Typography from \"@material-ui/core/Typography\";\nimport propTypes from \"prop-types\"\n\nconst TodoAppTitle = ({ title }) => {\n    return (\n        <div>\n            <Typography style={{ padding: 16 }} variant=\"h1\">\n                {title}\n            </Typography>\n        </div>\n    )\n}\nTodoAppTitle.prototype = {\n    title: propTypes.string.isRequired \n}\n\nexport default TodoAppTitle\n","import { ADD_TODO, TOGGLE_TODO, DELETE_TODO, SHOW_NOTIFICATION, HIDE_NOTIFICATION } from \"./actionTypes\"\n\nexport const addTodo = (newTodoObject) => {\n    //before thunk\n    // return {\n    //     type: ADD_TODO,\n    //     payload: content\n    // }\n    return (dispatch) => {\n        dispatch({\n            type: ADD_TODO,\n            payload: newTodoObject\n        });\n        dispatch(showNotification(`${newTodoObject.title} added`))\n    }\n}\nexport const deleteTodo = (id) => {\n    return (dispatch) => {\n        dispatch({\n            type: DELETE_TODO,\n            payload: id\n        });\n        dispatch(showNotification(\"Item removed\"))\n    }\n}\n\nexport const toggleTodo = (id) => {\n    return (dispatch) => {\n        dispatch({\n            type: TOGGLE_TODO,\n            payload: id\n        })\n        dispatch(showNotification(\"toggled\"))\n    }\n}\n\n\nexport const showNotification = (content) => {\n    return (dispatch) => {\n        dispatch({\n            type: SHOW_NOTIFICATION,\n            payload: content\n        })\n        setTimeout(() => {\n            dispatch(hideNotification())\n        }, 2000);\n    }\n}\n\nexport const hideNotification = (content) => {\n    return {\n        type: HIDE_NOTIFICATION,\n    }\n}","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const SHOW_NOTIFICATION = \"SHOW_NOTIFICATION\";\nexport const HIDE_NOTIFICATION = \"HIDE_NOTIFICATION\"\n\n","/* eslint-disable no-useless-constructor */\nimport React, { Component } from 'react';\nimport { Button, TextField, Checkbox, FormLabel, FormControl, InputLabel, Select, MenuItem } from \"@material-ui/core\";\nimport { connect } from \"react-redux\"\nimport { addTodo } from \"../redux/actions\"\nimport { Formik } from \"formik\"\nimport * as Yup from \"yup\"\n\nconst todoAddValidation = Yup.object().shape({\n    title: Yup.string().required(\"You can't add todo without entering title!\").max(25, \"You can't enter more than 25 characters\"),\n    description: Yup.string().min(5,\"You can't enter less than 5 characters\").max(50, \"You can't enter more than 50 characters\")\n\n});\n\n\n\nclass TodoAppAdd extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <div>\n                <Formik\n                    initialValues={{\n                        title: \"\",\n                        description: \"\",\n                        completed: false,\n                        priority: \"high\",\n                    }}\n                    validationSchema={todoAddValidation}\n                    onSubmit={(values, { resetForm }) => {\n                        this.props.addTodo(values)\n                        resetForm({})\n                    }}\n                >\n                    {({\n                        values,\n                        errors,\n                        handleChange,\n                        handleSubmit,\n                        setFieldValue,\n                        isSubmitting\n                    }) => {\n                        // console.log(\"errors\", errors)\n                        return (\n                            <form onSubmit={handleSubmit}>\n                                <div>\n                                    <TextField type=\"text\"\n                                        name=\"title\"\n                                        placeholder=\"Add Todo Title\"\n                                        label=\"Title\"\n                                        value={values.title}\n                                        onChange={handleChange}\n                                    />\n                                </div>\n                                {\n                                    errors.title && <div><h4 style={{ color: \"red\" }}>{errors.title}</h4></div>\n                                }\n                                <div>\n                                    <TextField type=\"text\"\n                                        placeholder=\"Add Todo Description\"\n                                        label=\"Description\"\n                                        name=\"description\"\n                                        value={values.description}\n                                        onChange={handleChange}\n                                    />\n                                </div>\n                                {\n                                    errors.description && <div><h4 style={{color:\"red\"}}>{errors.description}</h4></div>\n                                }\n                                <div>\n                                    <Checkbox type=\"checkbox\"\n                                        name=\"completed\"\n                                        id=\"completed-todo-field\"\n                                        value={values.completed}\n                                        checked={values.completed}\n                                        onChange={() => { setFieldValue(\"completed\", true) }}\n                                    />\n                                    <FormLabel htmlFor=\"completed-todo-field\">Completed</FormLabel>\n                                </div>\n                                <div>\n                                    <Checkbox type=\"checkbox\"\n                                        name=\"completed\"\n                                        id=\"completed-todo-field\"\n                                        value={values.completed}\n                                        checked={!values.completed}\n                                        onChange={() => { setFieldValue(\"completed\", false) }}\n                                    />\n                                    <FormLabel htmlFor=\"uncompleted-todo-field\">Not Completed</FormLabel>\n                                </div>\n                                <div>\n                                    <FormControl>\n                                        <Select name=\"priority\"\n                                            value={values.priority}\n                                            onChange={handleChange}\n                                        >\n                                            <MenuItem value=\"high\">High</MenuItem>\n                                            <MenuItem value=\"medium\">Medium</MenuItem>\n                                            <MenuItem value=\"low\">Low</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                                <Button type=\"submit\" style={{\n                                    opacity: (Object.keys(errors).length > 0) || isSubmitting ? \"0.2\" : \"1\"  \n                                }}>Submit</Button>\n                                {/* <Button disabled={!values.title} type=\"submit\">Submit</Button> */}\n                            </form>\n                        )\n                    }}\n                </Formik>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = {\n    addTodo: addTodo\n}\n\nexport default connect(null, mapDispatchToProps)(TodoAppAdd);\n\n","import React from 'react'\nimport TodoAppTitle from './TodoAppTitle'\nimport TodoAppAdd from './TodoAppAdd'\n\nconst TodoAppHeader = () => {\n    return (\n        <div>\n            <TodoAppTitle title=\"React Redux Todo\"/>\n            <TodoAppAdd />\n        </div>\n    )\n}\n\nexport default TodoAppHeader\n","import React from 'react'\nimport { connect } from \"react-redux\"\nimport { toggleTodo, deleteTodo } from \"../redux/actions\"\nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst TodoAppListItem = ({ title,description,priority, id, completed, toggleTodo, deleteTodo }) => {\n    return (\n<ListItem style={{ display: \"center\",flexDirection: \"row\",alignItems: \"center\",justifyContent: \"center\" }}>\n            <Checkbox\n                onClick={() => toggleTodo(id)} />\n\n            <Typography style={{\n                textDecoration: completed ? \"line-through\" : \"initial\"\n            }}>\n                <div>\n                {title}\n                </div>\n                <div>\n                {description}\n                </div>\n                <div>\n                    <strong>Priority:</strong>{priority}\n                </div>\n            </Typography>\n            <IconButton onClick={() => deleteTodo(id)}>\n                <CloseIcon />\n            </IconButton>\n        </ListItem>\n    )\n}\nconst mapDispatchToProps = {\n    toggleTodo: toggleTodo,\n    deleteTodo: deleteTodo\n}\n\nexport default connect(null, mapDispatchToProps)(TodoAppListItem)\n","import React from 'react'\nimport TodoAppListItem from \"./TodoAppListItem\"\nimport { connect } from \"react-redux\"\nimport { List } from \"@material-ui/core\";\nconst TodoAppList = (props) => {\n    return (\n        <List>\n            {\n                props.todos.map((todo) => {\n                    return <TodoAppListItem {...todo} />\n                })\n            }\n        </List>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        todos: state.todoReducer\n    }\n}\n\nexport default connect(mapStateToProps)(TodoAppList)\n","import React, { Component } from 'react';\nimport TodoAppHeader from './TodoAppHeader'\nimport TodoAppList from './TodoAppList'\nimport {connect} from \"react-redux\"\n\nclass TodoApp extends Component {\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div>\n                <TodoAppHeader />\n                <TodoAppList />\n                {\n                    this.props.showNotification && <h3>{this.props.notificationText}</h3>\n                }\n            </div>\n        );\n    }\n}\n\n\n\nconst mapStateToProps = (state) =>{\n    const { showNotification, notificationText} = state.notificationsReducer\n    return {\n        showNotification,\n        notificationText\n    }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n\n","import React from 'react';\nimport './App.css';\nimport TodoApp from './components/TodoApp'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { todoReducer, notificationsReducer } from \"./reducers\"\nimport { combineReducers, createStore, applyMiddleware } from \"redux\"\n//import logger from \"redux-logger\"\nimport thunk from \"redux-thunk\"\n\nconst reducers = combineReducers({\n    todoReducer: todoReducer,\n    notificationsReducer: notificationsReducer\n\n})\n\nexport const store = createStore(reducers, applyMiddleware(thunk));\n\n\n\n","import { ADD_TODO, TOGGLE_TODO, DELETE_TODO, SHOW_NOTIFICATION, HIDE_NOTIFICATION } from \"./actionTypes\";\n\nexport const todoReducer = (state = [], action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return [...state, {id: Math.random(),...action.payload}]\n        case DELETE_TODO:\n            return state.filter((todo) => todo.id !== action.payload)\n\n        case TOGGLE_TODO:\n            return state.map((todo) => {\n                if (todo.id === action.payload) {\n                    return { ...todo, completed: !todo.completed }\n                }\n                return todo\n            })\n        default:\n            return state\n    }\n}\n\n\nexport const notificationsReducer = (state= {showNotification: false, notificationText: \"\"}, action) => {\n    switch (action.type) {\n        case SHOW_NOTIFICATION:\n            return {...state, showNotification: true, notificationText: action.payload};\n        case HIDE_NOTIFICATION:\n            return {...state, showNotification: false, notificationText: \"\"};\n        default:\n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}